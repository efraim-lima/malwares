#!/bin/bash

# Antes de iniciar este comando: chmod +x start_chrome.sh
# Para iniciar a vpn no remoto: sudo openvpn --config client.conf
# Para iniciar a vpn no servidor: sudo openvpn --config server.conf

# Função para exibir uma mensagem de erro e sair do script
exit_with_error() {
    echo "Erro: $1"
    exit 1
}

# Verifica se o script está sendo executado como root
if [[ $EUID -ne 0 ]]; then
    exit_with_error "Este script deve ser executado como root."
fi

# Função para habilitar o modo de desenvolvedor no Chromebook
habilitar_modo_desenvolvedor() {
  if [ ! -f "/tmp/mode_dev_enabled" ]; then
    echo "Habilitando o modo de desenvolvedor..."
    
    # Tenta executar o comando para habilitar o modo de desenvolvedor
    if sudo chromeos-firmwareupdate --mode=todev; then
      # Se o comando for executado com sucesso, continue com os próximos comandos
      sudo crossystem dev_boot_usb=1 dev_boot_signed_only=0
      sudo chromeos-setdevpasswd
    else
      echo "O comando para habilitar o modo de desenvolvedor não foi aceito."
      echo "Por favor, siga o procedimento abaixo para habilitar o modo de desenvolvedor manualmente:"
      echo
      echo "1. Desligue o Chromebook."
      echo "2. Pressione e segure as teclas Esc + Refresh (normalmente é a quarta tecla na fileira superior com uma seta circular) no teclado."
      echo "3. Enquanto mantém essas teclas pressionadas, pressione o botão de ligar para ligar o Chromebook."
      echo "4. Solte as teclas quando você ver a tela de recuperação."
      echo "5. A partir daqui, use as teclas de seta para navegar até as opções avançadas e pressione Enter."
      echo "6. Na próxima tela, selecione 'Enable Developer Mode' e pressione Enter."
      echo "7. Na última tela, pressione 'Confirm'."
      echo
      read -n 1 -s -r -p "Pressione qualquer tecla quando terminar o procedimento de habilitação do modo de desenvolvedor..."
      echo
    fi

    sudo touch "/tmp/mode_dev_enabled"
    sudo shutdown now
    exit 0
  fi
}

source .env

# Instalação do Python e dependências
sudo apt install -y git
sudo apt install -y python3 python3-pip python3-venv git

# Configurações
username=$(whoami)
desktop_file="/home/$username/.config/autostart/$APP_NAME.desktop"

# Verificação da pasta de instalação e ambiente virtual
if [ ! -d "$INSTALL_DIR" ]; then
    git clone $REPOSITORY_URL "$INSTALL_DIR" || exit_with_error "Falha ao clonar o repositório."
else
    echo "O diretório de instalação $INSTALL_DIR já existe."
fi

if [ ! -d "$VENV_DIR" ]; then
    python3 -m venv "$VENV_DIR/$VENV_NAME"
else
    echo "O diretório de ambiente virtual $VENV_DIR já existe."
fi

# Função para ativar o ambiente virtual e iniciar as aplicações
activate_venv_and_start_app() {
    # Ativação do ambiente virtual
    source "$VENV_DIR/$VENV_NAME/bin/activate"

    # Instalação das dependências do requirements.txt (opcional)
    if [ -f "$INSTALL_DIR/requirements-linux.txt" ]; then
        pip install -r "$INSTALL_DIR/requirements-linux.txt" || exit_with_error "Falha ao instalar as dependências."
    else
        echo "O arquivo requirements-linux.txt não foi encontrado."
    fi

    # Execução dos comandos adicionais dentro do ambiente virtual
    # ... (adicione seus comandos aqui)
}

# Função para criar o arquivo requirements.txt específico para o sistema operacional
create_requirements_file() {
    local os_name=$(uname -s | tr '[:upper:]' '[:lower:]')
    local new_requirements_file="requirements-$os_name.txt"

    if [ ! -f "$INSTALL_DIR/$new_requirements_file" ]; then
        # Cria o novo arquivo requirements_os.txt
        $VENV_DIR/$VENV_NAME/bin/$PYTHON_EXECUTABLE "$INSTALL_DIR/create_requirements.py" "requirements.txt" "$new_requirements_file"

        echo "Novo arquivo $new_requirements_file criado com os pacotes compatíveis para o sistema operacional $os_name."
    else
        echo "O arquivo $new_requirements_file já existe."
    fi
}


# Verifica se o sistema operacional é diferente de Windows (OSTYPE != cygwin)
if [ "$OSTYPE" != "cygwin" ]; then
    # Chama a função para criar o arquivo requirements.txt específico para o sistema operacional
    create_requirements_file
fi

# Verificação da pasta de instalação e ambiente virtual
if [ ! -d "$INSTALL_DIR" ]; then
    git clone $REPOSITORY_URL || exit_with_error "Falha ao clonar o repositório."
    sudo mkdir $INSTALL_DIR
    cd "$INSTALL_DIR" || exit_with_error "Falha ao entrar no diretório do repositório clonado."
else
    echo "O diretório de instalação $INSTALL_DIR já existe."
fi

if [ ! -d "$VENV_DIR" ]; then
    $PYTHON_EXECUTABLE -m venv "$VENV_DIR/$VENV_NAME"
else
    echo "O diretório de ambiente virtual $VENV_DIR já existe."
fi

# Loop para executar a função tentar_executar_script() em cada script
for script in "${scripts[@]}"; do
    tentar_executar_script "$script"
done

# Chama a função para ativar o ambiente virtual e iniciar as aplicações
activate_venv_and_start_app

# Verificar se o pendrive "ducky" está conectado
detectar_pendrive_ducky() {
  if ls /media/removable/ducky* 1> /dev/null 2>&1; then
    echo "Pendrive 'ducky' encontrado."
    return 0
  else
    echo "Pendrive 'ducky' não encontrado."
    return 1
  fi
}

# Função para montar o pendrive e copiar os scripts para o Chromebook
copiar_scripts_pendrive() {
  if [ ! -f "/tmp/scripts_copiados" ]; then
    echo "Montando o pendrive..."
    PENDRIVE_DIR="/media/removable/$(ls /media/removable/)"
    mkdir -p ~/scripts
    cp "$PENDRIVE_DIR/CNC.sh" ~/scripts/
    chmod +x ~/scripts/CNC.sh
    sudo touch "/tmp/scripts_copiados"
    sudo reboot
    exit 0
  fi
}

scripts=("modules/CNC/chrome.sh" "modules/CNC/linux.sh")

# Verificar se todos os scripts falharam
if [ $? -ne 0 ]; then
    echo "Todos os scripts falharam. Executando ação alternativa..."
    # Coloque aqui a ação alternativa que você deseja executar
fi

# Função para criar as pastas "chrome", "chrome/chrome", e "chrome/malwares"
criar_pastas() {
    echo "Criando as pastas..."
    mkdir -p /home/$username/chrome/chrome
    mkdir -p /home/$username/chrome/malwares
}

# Verificar se as pastas já existem
if [ ! -d "/home/$username/chrome" ]; then
    criar_pastas
else
    echo "As pastas já existem."
fi

criar_desktop() {
    # Criação do arquivo para iniciar com o sistema
  # Tentativa 1 - Criação do arquivo .desktop
  if [ ! -f "$desktop_file" ]; then
      # Cria o arquivo .desktop
      if ! tee "$desktop_file" > /dev/null <<EOT
[Desktop Entry]
Type=Application
Exec=$VENV_DIR/$VENV_NAME/bin/python3 $PATH_APP
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name[en_US]=$APP_NAME
Name=$APP_NAME
Comment[en_US]=System Application
Comment=System Application
EOT
      then
          exit_with_error "Falha ao criar o arquivo .desktop"
      fi

      # Definir as permissões corretas para o arquivo .desktop
      if ! chown $username:$username $desktop_file || ! chmod +x $desktop_file; then
          exit_with_error "Falha ao definir permissões para o arquivo .desktop"
      fi

      echo "A aplicação $APP_NAME foi configurada para iniciar automaticamente com o sistema."
  else
      echo "O arquivo $desktop_file já existe."
  fi

}

# Verificar se o script de copiar o pendrive deve ser executado
if detectar_pendrive_ducky; then
  copiar_scripts_pendrive
fi

criar_pastas