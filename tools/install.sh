#!/bin/bash

source .env

# Antes de iniciar este comando: chmod +x start.sh

# Função para exibir uma mensagem de erro e sair do script
exit_with_error() {
    echo "Erro: $1"
    exit 1
}

# Verifica se o script está sendo executado como root
if [[ $EUID -ne 0 ]]; then
    exit_with_error "Este script deve ser executado como root."
fi

# Função para habilitar o modo de desenvolvedor no Chromebook
habilitar_modo_desenvolvedor() {
  if [ ! -f "/tmp/mode_dev_enabled" ]; then
    echo "Habilitando o modo de desenvolvedor..."
    
    # Tenta executar o comando para habilitar o modo de desenvolvedor
    if sudo chromeos-firmwareupdate --mode=todev; then
      # Se o comando for executado com sucesso, continue com os próximos comandos
      sudo crossystem dev_boot_usb=1 dev_boot_signed_only=0
      sudo chromeos-setdevpasswd
    else
      echo "O comando para habilitar o modo de desenvolvedor não foi aceito."
      echo "Por favor, siga o procedimento abaixo para habilitar o modo de desenvolvedor manualmente:"
      echo
      echo "1. Desligue o Chromebook."
      echo "2. Pressione e segure as teclas Esc + Refresh (normalmente é a quarta tecla na fileira superior com uma seta circular) no teclado."
      echo "3. Enquanto mantém essas teclas pressionadas, pressione o botão de ligar para ligar o Chromebook."
      echo "4. Solte as teclas quando você ver a tela de recuperação."
      echo "5. A partir daqui, use as teclas de seta para navegar até as opções avançadas e pressione Enter."
      echo "6. Na próxima tela, selecione 'Enable Developer Mode' e pressione Enter."
      echo "7. Na última tela, pressione 'Confirm'."
      echo
      read -n 1 -s -r -p "Pressione qualquer tecla quando terminar o procedimento de habilitação do modo de desenvolvedor..."
      echo
    fi
    sudo touch "/tmp/mode_dev_enabled"
    sudo shutdown now
    exit 0
  fi
}

# Função para criar o arquivo requirements.txt específico para o sistema operacional
create_requirements_file() {
    local $OS_NAME
    local new_requirements_file="requirements-$OS_NAME.txt"

    if [ ! -f "$INIT_DIR/tools/$new_requirements_file" ]; then
        # Cria o novo arquivo requirements_os.txt
        $INIT_DIR/$VENV_NAME/bin/$PYTHON_EXECUTABLE "$INIT_DIR/create_requirements.py" "requirements.txt" "$new_requirements_file"
        echo "Novo arquivo $new_requirements_file criado com os pacotes compatíveis para o sistema operacional $OS_NAME."
    else
        echo "O arquivo $new_requirements_file já existe."
    fi
}

# Instalação do Python e dependências
sudo apt install -y python3 python3-pip python3-venv git

# Verificação da pasta de instalação e ambiente virtual
if [ ! -d "$INIT_DIR" ]; then
    sudo mkdir $INIT_DIR
    cd "$INIT_DIR" || exit_with_error "Falha ao entrar no diretório do repositório clonado."
else
    cd "$INIT_DIR"
    echo "O diretório de instalação $INIT_DIR já existe."
fi

if [ ! -d "$INIT_DIR" ]; then
    python3 -m venv "$INIT_DIR/$VENV_NAME"
    source $VENV_NAME/bin/activate
else
    source $VENV_NAME/bin/activate
    echo "O diretório de ambiente virtual $INIT_DIR já existe."
fi

# Verifica se o sistema operacional é diferente de Windows (OSTYPE != cygwin)
if [ "$OS_NAME" != "cygwin" ]; then
    # Chama a função para criar o arquivo requirements.txt específico para o sistema operacional
    create_requirements_file
fi

# Instalação das dependências do requirements.txt (opcional)
if [ -f "$INIT_DIR/requirements-$OS_NAME.txt" ]; then
    pip install -r "$ACTUALL/requirements-$OS_NAME.txt" || exit_with_error "Falha ao instalar as dependências."
else
    echo "O arquivo requirements-$OS_NAME.txt não foi encontrado."
fi