from selenium import webdriver
from selenium.webdriver.common.by import By
import pyperclip
import subprocess

chrome_passwords_url = "chrome://password-manager/passwords/"
# Obtém o caminho do diretório do perfil do Chrome

chrome_profile = "/opt/google/chrome/google-chrome"

# Comando para iniciar o Chrome com depuração remota
chrome_command = "google-chrome --remote-debugging-port=9223 &"
chrome_process = subprocess.Popen(chrome_command, shell=True)
# Aguarde até que o Chrome seja iniciado completamente
chrome_process.wait()

# Inicialize o WebDriver do Selenium com a depuração remota
chrome_options = webdriver.ChromeOptions()

chrome_options.add_experimental_option("debuggerAddress", "127.0.0.1:9223")
chrome_options.add_argument('--disable-extensions')
chrome_options.add_argument(f"--user-data-dir={chrome_profile}")
chrome_options.add_argument('--headless') # "--headless=new"
chrome_options.add_argument('--disable-gpu')  # Obrigatório para o Chrome headless
chrome_options.add_argument('--no-sandbox')  # Obrigatório para evitar problemas de sandbox

# Argumentos personalizados para o perfil e agente do usuário
chrome_options.add_argument('--profile-directory=Default')
chrome_options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36')

timeout = 5
# Inicializa o driver do Chrome
driver = webdriver.Chrome(options=chrome_options)
driver.implicitly_wait(timeout)

# Abre a página de senhas do Chrome
driver.get(chrome_passwords_url)
# Use execute_script para acessar o Shadow DOM
shadow_root_script = """
return document.querySelector("body > password-manager-app").shadowRoot
    .querySelector("#passwords").shadowRoot
    .querySelectorAll("#passwords > password-list-item");
"""
elements = driver.execute_script(shadow_root_script)

def expand_element(element):
    return driver.execute_script("return arguments[0].shadowRoot",element)

# Agora tente localizar o elemento

# Calcule o número de elementos
total_elements = len(elements)
print("Total de credenciais:", total_elements, '\n')

# Inicie um loop para clicar em cada elemento e fazer o que for necessário
for i, element in enumerate(elements, start=1):
    print(f"Capturando credencial: {i} de {total_elements} \n")
    
    # Clique no elemento para abri-lo
    element.click()

    shadow_host = driver.find_element(By.CSS_SELECTOR, 'body > password-manager-app')
    shadow_root = shadow_host.shadow_root
    element = shadow_root.find_element(By.CSS_SELECTOR, '#content')
    element = driver.execute_script('return arguments[0].shadowRoot', element)
    element = shadow_root.find_element(By.CSS_SELECTOR, 'password-details-section') # ESTE AQUI TEM COISA BOA

    driver.implicitly_wait(2)  # Aguarde 2 segundos (ajuste conforme necessário)
    element = expand_element(element)
    card = element.find_element(By.CSS_SELECTOR, 'password-details-card')
    card = expand_element(card)
    
    user = card.find_element(By.CSS_SELECTOR, '#usernameValue')
    user = expand_element(user)
    user = user.find_element(By.CSS_SELECTOR, '#copyButton') 
    driver.implicitly_wait(1)  # Aguarde 2 segundos (ajuste conforme necessário)
    user.click()

    # Colete o user da área de transferência
    user = pyperclip.paste()

    senha = card.find_element(By.CSS_SELECTOR, '#copyPasswordButton') 
    driver.implicitly_wait(2)  # Aguarde 2 segundos (ajuste conforme necessário)
    senha.click()

    # Colete a senha da área de transferência
    senha = pyperclip.paste()

    site = card.find_element(By.CSS_SELECTOR, 'div > div.credential-container')
    site = site.find_element(By.CLASS_NAME, 'site-link')
    site = site.text
    
    print(f'Site: {site}')
    print(f'User: {user}')
    print(f'Senha: {senha}')

    # Volte para a página anterior
    driver.back()
    

# Fecha o navegador
driver.close()
driver.quit()
chrome_process.terminate()